options
{
	DEBUG_PARSER=false;
	STATIC=false;
}

PARSER_BEGIN(Reader)

package jus.aoo.lvm.environment;
import jus.aoo.lvm.interpretation.*;

public class Reader
{
	/** le support de lecture */
	protected static java.io.Reader in = new BufferedReader(new InputStreamReader(System.in));
	
	/** lecture d'une S-EXPR au terminal
	* @return Sexpr : la Sexpr construite.
	* @throws LispException une erreur de syntaxe
	*/
	public static SExpr read() throws JavaCCException
	{
		Reader parser = new Reader(System.in);
	}

	/** lecture d'une S-EXPR à partir de la chaîne
	* @param s : la chaîne
	* @return Sexpr : la Sexpr construite.
	* @throws LispException une erreur de syntaxe
	*/
	public static SExpr read(String s) throws JavaCCException
	{	}

	/** évaluation de la séquence S-EXPRs à partir du fichier s
	* @param s : le nom du fichier
	* @return Sexpr : symbole du nom du fichier.
	* @throws LispException une erreur de lecture
	*/
	public static SExpr importe(String s) throws JavaCCException
	{
	}
}
PARSER_END(Reader)

// les caractères ignorés
SKIP :
{
	" " | "\t" | "\r"| "\n" // attention élimine la notion de fin de ligne
	| "\u0000" | "\u0001" | "\u0002" | "\u0003" | "\u0004" | "\u0005" | "\u0006" | "\u0007"
	| "\u0008" | "\u000B" | "\u000C" | "\u000E" | "\u000F" | "\u0010" | "\u0011" | "\u0012"
	| "\u0013" | "\u0014" | "\u0015" | "\u0016" | "\u0017" | "\u0018" | "\u0019" | "\u001A"
	| "\u001B" | "\u001C" | "\u001D" | "\u001E" | "\u001F" | "\u007F"
}
MORE :
{
	"//" : IN_SL_COMMENT
	| "/*" : IN_ML_COMMENT
}
<IN_SL_COMMENT> SPECIAL_TOKEN :{<SL_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT}
<IN_ML_COMMENT> SPECIAL_TOKEN :{<ML_COMMENT: "*/" > : DEFAULT}
<IN_SL_COMMENT,IN_ML_COMMENT> SKIP :{< ~[] >}// les lexèmes du langage

TOKEN :
{
	"("
	| ")"
	| "."
	| < IDENTIFIER : <LETTER>* > 
}

void S() : {} { E() <EOF>           }
void E() : {} { "(" A() A() ")"     }
void A() : {} { "(" A() A() ")"     }

void T() : {} { F() ("*" F())*      }
void F() : {} { <NUM> | "(" E() ")" }

// les règles de grammaire de ce langage
SExpr read() throws JavaCCException :
{Type2 s1;}
{
	(s1=SExpr(){…})* <EOF>
	{
	…
	}
	<EOF>
}