/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{	DEBUG_PARSER=false;
	STATIC=false;}PARSER_BEGIN(Reader)
//package <le package de d�claration> ;
 import jus.aoo.lvm.interpretation;
 import jus.aoo.lvm.environment;
public class Reader{

/** le support de lecture */
protected static java.io.Reader in = new BufferedReader(new InputStreamReader(System.in));
/** lecture d'une S-EXPR au terminal
* @return Sexpr : la Sexpr construite.
* @throws LispException une erreur de syntaxe
*/
public static Sexpr read() throws LispException{
	return (lecture_term());
 }
/** lecture d'une S-EXPR � partir de la cha�ne
* @param s : la cha�ne
* @return Sexpr : la Sexpr construite.
* @throws LispException une erreur de syntaxe
*/
public static Sexpr read(String s) throws LispException{

  return (lecture_chaine(s));
 }
/** �valuation de la s�quence S-EXPRs � partir du fichier s
* @param s : le nom du fichier
* @return Sexpr : symbole du nom du fichier.
* @throws LispException une erreur de lecture
*/
public static Sexpr importe(String s) throws LispException{
	return (lecture_fichier(s));
 }
}
PARSER_END(Reader)
// les caract�res ignor�s
SKIP :
{
" " | "\t" | "\r"| "\n" // attention �limine la notion de fin de ligne
| "\u0000" | "\u0001" | "\u0002" | "\u0003" | "\u0004" | "\u0005" | "\u0006" | "\u0007"
| "\u0008" | "\u000B" | "\u000C" | "\u000E" | "\u000F" | "\u0010" | "\u0011" | "\u0012"
| "\u0013" | "\u0014" | "\u0015" | "\u0016" | "\u0017" | "\u0018" | "\u0019" | "\u001A"
| "\u001B" | "\u001C" | "\u001D" | "\u001E" | "\u001F" | "\u007F"
}
MORE :
{
"//" : IN_SL_COMMENT
| "/*" : IN_ML_COMMENT
}
<IN_SL_COMMENT> SPECIAL_TOKEN :{<SL_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT}
<IN_ML_COMMENT> SPECIAL_TOKEN :{<ML_COMMENT: "*/" > : DEFAULT}
<IN_SL_COMMENT,IN_ML_COMMENT> SKIP :{< ~[] >}// les lex�mes du langage

TOKEN [IGNORE_CASE]:
{
 <CHAINE:(~[ "'", "(", ")"," " ])+ >
|<PAROUV:("(")+>
|<PAREF:(")")+>
|<POINT:(".")>
|<QUOTE:("'")>
|<CONS :("Cons")>
|<CAR :("Car")>
|<CDR :("Cdr")>
|<ATOM :("Atom")>
|<EQ :("eq")>


}
  //D�finir les lex�mes du langage

// les r�gles de grammaire de ce langage
Sexpr lecture_term():
{
  //used variables
 Symbole atome; SList l;}
{
   atome= Atome()
   {
     return atome;
   } 
   |< PAROUV > l=liste() < PAREF >   {
     return l;   }
    }

Symbole Atome():

{
  	//a = < CHAINE >
   // return new Symbole(a.image) nouvel objet atome(pas encore de constructeur d�fini);}

SList liste():
{SList l1,l2; Symbole a; Nil n;}

{
	 < PAROUV > l1 = liste() < PAREF > l2 = liste() {return new SCons(l1, l2);} //deux listes
	| n=NIL() l1= liste() {return new SCons(n, l1);} // 1ER ARG: Nil, 2em: liste
	| l1= liste() n=NIL() {return new SCons(l1, n);} // 1ER ARG: liste, 2em: NIL
	| a = Atome() l1 = liste() {return new SCons(a, l1);} //  1ER ARG: atome, 2em: liste
	| < PAROUV > < PAREF>  {return NIL;}
}

Nil NIL():

{
	< PAROUV > < PAREF> {return NIL;} 
}
/*
Type1 SEXPRESSIONS() :
{Type2 s1;}
{
(s1=SEXPR(){... })* <EOF>
{
...
}
<EOF>
}
*/
  